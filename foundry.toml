[profile.default]
src = "src"
out = "out"
libs = ["lib"]
solc = "0.8.22"
evm_version = "paris"
optimizer = true
optimizer_runs = 200
gas_reports = ["GoldToken", "GoldLottery", "GoldBridge"]

[profile.coverage]
src = "src"
out = "coverage-out"
libs = ["lib"]
# Configuration spécifique pour la couverture
via_ir = true
optimizer = true
optimizer_runs = 1_000_000 
fuzz_runs = 1_000
coverage = true
# Exclusions
exclude = [
    "lib/openzeppelin-contracts/contracts/utils/cryptography/P256.sol",
    "lib/openzeppelin-contracts/contracts/utils/math/**",
    "test/**",
    "script/**"
]
# Configurations supplémentaires pour éviter les erreurs
extra_output = ["storageLayout", "metadata"]
no_match_test = "testFail"
match_contract = "(?i)GoldToken|GoldLottery|GoldBridge"

[profile.default.rpc_endpoints]
ethereum = "${ETH_RPC_URL}"
bsc = "${BSC_RPC_URL}"

[profile.default.etherscan]
ethereum = { key = "${ETHERSCAN_API_KEY}" }
bsc = { key = "${BSCSCAN_API_KEY}" }

[fuzz]
runs = 1000
max_test_rejects = 100000

[invariant]
runs = 1000
depth = 15
fail_on_revert = false

[profile.ci]
fuzz = { runs = 10000 }
invariant = { runs = 10000 }

[profile.local]
fuzz = { runs = 100 }
invariant = { runs = 100 }

[profile.mainnet]
eth_rpc_url = "${ETH_RPC_URL}"
fork_block_number = "${MAINNET_FORK_BLOCK}"

[profile.bsc]
eth_rpc_url = "${BSC_RPC_URL}"
fork_block_number = "${BSC_FORK_BLOCK}"